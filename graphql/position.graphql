extend type Query {
    positions: [Position!]! @all
    position(id: ID @eq, callsign: String @eq): Position @find
    positionsAvailableForTraining: [TrainingPositionAssignment!]! @all
}

extend type Mutation {
    createPosition(
        name: String! @rules(apply: ["required"]),
        callsign: String! @rules(apply: ["required", "min:4", "unique:positions,callsign"]),
        frequency: String! @rules(apply: ["required", "min:7"]),
        type: Int! @rules(apply: ["required"])
    ): Position! @create

    updatePosition(
        id: ID!
        name: String,
        callsign: String @rules(apply: ["min:4", "unique:positions,callsign"]),
        frequency: String @rules(apply: ["min:7"]),
        type: Int
    ): Position @update

    assignPositionForTraining(
        position_id: Int!
    ): TrainingPositionAssignment! @field(resolver: "App\\Modules\\Position\\CreateAssignmentHandler")

    removePositionFromTraining(
        position_id: Int!
    ): Boolean! @field(resolver: "App\\Modules\\Position\\RemoveAssignmentHandler" )

}

input PositionRelation {
    connect: ID @rules(apply: ["exists:positions,id"])
}

type Position {
    id: ID!
    callsign: String!
    name: String!
    frequency: String!
    type: String!
    type_human: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type TrainingPositionAssignment {
    id: ID!
    position: Position!
    deleted_at: DateTime!
}
