extend type Query {
    bookings: [Booking!]! @paginate
    bookingsByDate(from: Date! @where(clause: "whereDate")): [Booking!]! @all
    bookingsBetweenDates(from: DateRange @whereBetweenDate): [Booking!]! @all
    booking(id: ID @eq): Booking @find
}

input CreateBookingInput {
    position_id: Int!,
    network_type: NetworkType!,
    from: DateTime! @rules(apply: ["before:input.to"]),
    to: DateTime! @rules(apply: ["after:input.from"]),
}

input UpdateBookingInput {
    id: ID! @rules(apply: ["exists:bookings,id"])
    from: DateTime! @rules(apply: ["before:input.to"]),
    to: DateTime! @rules(apply: ["after:input.from"]),
    network_type: NetworkType!
}

extend type Mutation @middleware(checks: ["auth"]) {
    createBooking(input: CreateBookingInput! @spread): Booking! @field(resolver: "App\\Modules\\Bookings\\Mutations\\CreateBookingHandler")
    updateBooking(input: UpdateBookingInput! @spread): Booking! @field(resolver: "App\\Modules\\Bookings\\Mutations\\UpdateBookingHandler")
    deleteBooking(id: ID!): Booking! @delete
}

enum NetworkType {
  LIVE @enum(value: 0)
  SWEATBOX @enum(value: 1)
}

type Booking implements Node {
    id: ID!
    user_id: ID!
    position: Position! @belongsTo
    network_type: NetworkType!
    from: DateTime!
    to: DateTime!
    created_at: DateTimeZulu!
    updated_at: DateTimeZulu!
}
