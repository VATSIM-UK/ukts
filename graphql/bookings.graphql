extend type Query {
    bookings: [Booking!]! @paginate
    bookingsByDate(from: Date! @where(clause: "whereDate")): [Booking!]! @all
    bookingsBetweenDates(from: DateRange @whereBetweenDate): [Booking!]! @all
    booking(id: ID @eq): Booking @find
}

extend type Mutation @middleware(checks: ["auth"]) {
    createBooking(
        position_id: Int!,
        from: DateTime! @rules(apply: ["before:to"]),
        to: DateTime! @rules(apply: ["after:from"]),
    ): Booking! @field(resolver: "App\\Modules\\Bookings\\CreateBookingHandler")

    updateBooking(
        id: ID! @rules(apply: ["exists:bookings"])
        from: DateTime! @rules(apply: ["before:to"]),
        to: DateTime! @rules(apply: ["after:from"]),
    ): Booking @field(resolver: "App\\Modules\\Bookings\\UpdateBookingHandler")

    deleteBooking(
        id: ID!
    ): Booking @delete
}

type Booking {
    id: ID!
    user_id: ID!
    position: Position! @belongsTo
    from: DateTime!
    to: DateTime!
    created_at: DateTime!
    updated_at: DateTime!
}
