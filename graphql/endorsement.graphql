extend type Query {
    specialEndorsements: [SpecialEndorsement!]! @all
    specialEndorsement(id: ID @eq): SpecialEndorsement @find
    specialEndorsementsForUser(user_id: ID): [SpecialEndorsement]! @field(resolver: "App\\Modules\\Endorsement\\Special\\Mutations\\SpecialEndorsementsForUser")
}

input SpecialEndorsementInput {
    name: String! @rules(apply: ["min:3"])
}

input SpecialEndorsementRequestInput {
    user_id: ID!
    endorsement_id: Int! @rules(apply: ["exists:special_endorsements,id"])
    requested_by: Int!
}

extend type Mutation {
    createSpecialEndorsement(input: SpecialEndorsementInput! @spread): SpecialEndorsement! @create

    updateSpecialEndorsement(id: ID!, input: SpecialEndorsementInput! @spread): SpecialEndorsement @update

    deleteSpecialEndorsement(id: ID!): SpecialEndorsement! @delete

    grantSpecialEndorsement(
        request_id: ID!
        actioner_id: Int!): Assignment!
    @field(resolver: "App\\Modules\\Endorsement\\Special\\Mutations\\GrantSpecialEndorsementHandler")

    requestSpecialEndorsement(input: SpecialEndorsementRequestInput! @spread): EndorsementRequest!
    @field(resolver: "App\\Modules\\Endorsement\\Special\\Mutations\\RequestSpecialEndorsementHandler")
}
interface Endorsement {
    id: ID!
    name: String!
    users: [User!]
}
type SpecialEndorsement implements Endorsement{
    id: ID!
    name: String!
    deleted_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    pivot: Assignment!
    users: [User!]
}

type EndorsementRequest {
    user: User!
    endorsement: Endorsement!
    endorsement_type: String!
    approved_at: DateTime
    denied_at: DateTime
    actioned_by: User!
}

type Assignment {
    user_id: Int!
    endorsement_id: Int!
    created_at: DateTime!
    user: User!
}
